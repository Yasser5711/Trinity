name: Back Workflow

on:
  pull_request:
    paths:
      - "back/**"
  workflow_run:
    workflows: ["Lint Commit Messages"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: üîç Ruff Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: üì¶ Install Ruff
        working-directory: back
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: üßπ Run Ruff
        working-directory: back
        run: |
          ruff check . --output-format=github

  test:
    name: ‚úÖ Run Back Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Set environment variables
        run: |
          export DATABASE_USER=user
          export DATABASE_PASSWORD=password
          export DATABASE_NAME=dev_db
          export DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost:5432/${DATABASE_NAME}
          export ALEMBIC_DATABASE_URL=postgresql+psycopg2://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost:5432/${DATABASE_NAME}
          echo "‚úÖ Exported DB environment variables"
      - name: üì¶ Install dependencies
        working-directory: back
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: üß™ Run Tests with Coverage
        working-directory: back
        run: |
          pytest --cov-config=coverage.ini

      - name: üìä Enforce Coverage Threshold (85%)
        working-directory: back
        run: |
          THRESHOLD=85
          COVERAGE_FILE="coverage.json"

          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "üö® Coverage file not found: $COVERAGE_FILE"
            exit 1
          fi

          COVERAGE=$(jq -r '.totals.percent_covered' "$COVERAGE_FILE" | cut -d'.' -f1)
          echo "üìä Code coverage: ${COVERAGE}%"

          if [ "$COVERAGE" -lt "$THRESHOLD" ]; then
            echo "‚ùå Coverage below threshold (${THRESHOLD}%). Failing."
            exit 1
          fi

      - name: üì§ Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: back/coverage.xml

      - name: üìù Report Coverage in PR
        if: always()
        uses: orgoro/coverage@v3.2
        with:
          coverageFile: back/coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
